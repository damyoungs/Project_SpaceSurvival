//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/EventBase/Noh/InputKeyMouse.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputKeyMouse: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputKeyMouse()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputKeyMouse"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6bf7fcac-46d0-4320-9692-0a76b11f1f1a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cea3fd64-0375-4036-a9c7-f16c71e8a4da"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""03061f1f-f80d-44a5-a7a0-b6cdd9686339"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WindowOpen"",
                    ""type"": ""Value"",
                    ""id"": ""31f30b1d-62af-42a0-87cf-b176a1571fae"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""79f2bcce-1731-470c-b402-56a16e2bf388"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""138d0a7d-de78-4b81-8e5f-3b4af446f07b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""55d7dd7d-cd02-496b-9861-ecaed4f732f2"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a920428c-bc8b-49ef-bec7-1ed924d60fbe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3d06f87-3e25-4d1a-8768-9a7acf6dc7ec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""a6c28e03-a3fc-43db-a144-a3c64a680e22"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""40082fc1-749e-49ad-ae7f-efc040fc5fcb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7bc88173-7735-4b85-8d40-9c3440e4a0b8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d536e9e2-2322-4771-9b01-98f16dfdf690"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""WindowOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce050a21-2260-437d-b28a-361e6d60cc42"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WindowOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""f1e4a85e-3bfc-4c6d-9743-b903aec62752"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""860a2f18-a6e5-4d25-be20-420123db91d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""adc083b8-1d53-4c42-8333-0f490a6b2964"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4422859-ba09-41c2-87ed-f2055c1670ff"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fda9b359-ecf4-46a5-9055-007b9400a155"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""25dcd680-0c5e-4a1e-96ef-3709092506dc"",
            ""actions"": [
                {
                    ""name"": ""Test1"",
                    ""type"": ""Button"",
                    ""id"": ""8a61d9b3-9faf-4927-be34-8d893aa082c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test2"",
                    ""type"": ""Button"",
                    ""id"": ""f2879c16-98b4-4dbf-9e8b-6796d1838c66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test3"",
                    ""type"": ""Button"",
                    ""id"": ""022ab744-1e8c-4dce-9390-6ffb71809859"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test4"",
                    ""type"": ""Button"",
                    ""id"": ""79bd4f88-c1b1-4353-9297-f65d636bc285"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test5"",
                    ""type"": ""Button"",
                    ""id"": ""9ad8d3ff-70cb-479d-9a5f-c4cd84916a34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""351d0159-f709-44b3-99e8-8f84c49a7a95"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5dee253-a44b-4905-92b7-0a1a625c8831"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6e58968-61eb-4b49-889f-06e9dee00cac"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a6cea9c-cc0c-4631-87c1-8a531f45251e"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eefba083-7254-4209-9d3e-d2ad6130883c"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Charcter"",
            ""id"": ""08432d6d-899a-4541-85a4-2be2bdf79b7e"",
            ""actions"": [
                {
                    ""name"": ""MoveAndUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""67b96c39-b1a8-4af0-9039-5db8ccc1839b"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveBooster"",
                    ""type"": ""Value"",
                    ""id"": ""7102c3f9-7f54-4de4-af9b-9fc94d975f5b"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""12dde97c-8e1e-45b9-84c9-ba1b613133ce"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""053000bf-5a32-42e1-8d48-4da25c7e8054"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e802f7a8-7bae-4f59-bc7d-28325d8127f7"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8ae54434-7c33-4482-a8fb-5e2d4580153c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7c10b84d-180d-4e4c-9a4c-5f6c5dfd02ec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""22031b0a-2d9d-4c95-8622-950f1072196f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""42a79d8e-567c-433a-b44c-414a2dc5854c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6bfc6364-c2b8-42a3-8dd6-ea2569fea6e0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBooster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeyBorad"",
            ""id"": ""ff5bd8d5-e400-4eb2-b7d3-71fd160c2c2b"",
            ""actions"": [
                {
                    ""name"": ""System"",
                    ""type"": ""Button"",
                    ""id"": ""ce85bb58-3191-4d62-a457-cd126dccebac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OptionKey"",
                    ""type"": ""Button"",
                    ""id"": ""51f2f8a8-f04c-4371-acc1-d0bdcb6c9283"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvenKey"",
                    ""type"": ""Button"",
                    ""id"": ""a7db8ebc-c614-4ce4-8727-f069fa626f58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10c2f74a-7367-435e-b7a0-652e6d36cbc5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""System"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93a0022b-0bf3-4c42-b58a-06f605575090"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OptionKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f00f3477-90a9-49d9-8b08-4a0376eefec0"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InvenKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyMouse"",
            ""bindingGroup"": ""KeyMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_WindowOpen = m_Player.FindAction("WindowOpen", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseClick = m_Mouse.FindAction("MouseClick", throwIfNotFound: true);
        m_Mouse_TestClick = m_Mouse.FindAction("TestClick", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test1 = m_Test.FindAction("Test1", throwIfNotFound: true);
        m_Test_Test2 = m_Test.FindAction("Test2", throwIfNotFound: true);
        m_Test_Test3 = m_Test.FindAction("Test3", throwIfNotFound: true);
        m_Test_Test4 = m_Test.FindAction("Test4", throwIfNotFound: true);
        m_Test_Test5 = m_Test.FindAction("Test5", throwIfNotFound: true);
        // Charcter
        m_Charcter = asset.FindActionMap("Charcter", throwIfNotFound: true);
        m_Charcter_MoveAndUpDown = m_Charcter.FindAction("MoveAndUpDown", throwIfNotFound: true);
        m_Charcter_MoveBooster = m_Charcter.FindAction("MoveBooster", throwIfNotFound: true);
        // KeyBorad
        m_KeyBorad = asset.FindActionMap("KeyBorad", throwIfNotFound: true);
        m_KeyBorad_System = m_KeyBorad.FindAction("System", throwIfNotFound: true);
        m_KeyBorad_OptionKey = m_KeyBorad.FindAction("OptionKey", throwIfNotFound: true);
        m_KeyBorad_InvenKey = m_KeyBorad.FindAction("InvenKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_WindowOpen;
    public struct PlayerActions
    {
        private @InputKeyMouse m_Wrapper;
        public PlayerActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @WindowOpen => m_Wrapper.m_Player_WindowOpen;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @WindowOpen.started += instance.OnWindowOpen;
            @WindowOpen.performed += instance.OnWindowOpen;
            @WindowOpen.canceled += instance.OnWindowOpen;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @WindowOpen.started -= instance.OnWindowOpen;
            @WindowOpen.performed -= instance.OnWindowOpen;
            @WindowOpen.canceled -= instance.OnWindowOpen;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_MouseClick;
    private readonly InputAction m_Mouse_TestClick;
    public struct MouseActions
    {
        private @InputKeyMouse m_Wrapper;
        public MouseActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_Mouse_MouseClick;
        public InputAction @TestClick => m_Wrapper.m_Mouse_TestClick;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
            @TestClick.started += instance.OnTestClick;
            @TestClick.performed += instance.OnTestClick;
            @TestClick.canceled += instance.OnTestClick;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
            @TestClick.started -= instance.OnTestClick;
            @TestClick.performed -= instance.OnTestClick;
            @TestClick.canceled -= instance.OnTestClick;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Test1;
    private readonly InputAction m_Test_Test2;
    private readonly InputAction m_Test_Test3;
    private readonly InputAction m_Test_Test4;
    private readonly InputAction m_Test_Test5;
    public struct TestActions
    {
        private @InputKeyMouse m_Wrapper;
        public TestActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test1 => m_Wrapper.m_Test_Test1;
        public InputAction @Test2 => m_Wrapper.m_Test_Test2;
        public InputAction @Test3 => m_Wrapper.m_Test_Test3;
        public InputAction @Test4 => m_Wrapper.m_Test_Test4;
        public InputAction @Test5 => m_Wrapper.m_Test_Test5;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Test1.started += instance.OnTest1;
            @Test1.performed += instance.OnTest1;
            @Test1.canceled += instance.OnTest1;
            @Test2.started += instance.OnTest2;
            @Test2.performed += instance.OnTest2;
            @Test2.canceled += instance.OnTest2;
            @Test3.started += instance.OnTest3;
            @Test3.performed += instance.OnTest3;
            @Test3.canceled += instance.OnTest3;
            @Test4.started += instance.OnTest4;
            @Test4.performed += instance.OnTest4;
            @Test4.canceled += instance.OnTest4;
            @Test5.started += instance.OnTest5;
            @Test5.performed += instance.OnTest5;
            @Test5.canceled += instance.OnTest5;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Test1.started -= instance.OnTest1;
            @Test1.performed -= instance.OnTest1;
            @Test1.canceled -= instance.OnTest1;
            @Test2.started -= instance.OnTest2;
            @Test2.performed -= instance.OnTest2;
            @Test2.canceled -= instance.OnTest2;
            @Test3.started -= instance.OnTest3;
            @Test3.performed -= instance.OnTest3;
            @Test3.canceled -= instance.OnTest3;
            @Test4.started -= instance.OnTest4;
            @Test4.performed -= instance.OnTest4;
            @Test4.canceled -= instance.OnTest4;
            @Test5.started -= instance.OnTest5;
            @Test5.performed -= instance.OnTest5;
            @Test5.canceled -= instance.OnTest5;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);

    // Charcter
    private readonly InputActionMap m_Charcter;
    private List<ICharcterActions> m_CharcterActionsCallbackInterfaces = new List<ICharcterActions>();
    private readonly InputAction m_Charcter_MoveAndUpDown;
    private readonly InputAction m_Charcter_MoveBooster;
    public struct CharcterActions
    {
        private @InputKeyMouse m_Wrapper;
        public CharcterActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAndUpDown => m_Wrapper.m_Charcter_MoveAndUpDown;
        public InputAction @MoveBooster => m_Wrapper.m_Charcter_MoveBooster;
        public InputActionMap Get() { return m_Wrapper.m_Charcter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharcterActions set) { return set.Get(); }
        public void AddCallbacks(ICharcterActions instance)
        {
            if (instance == null || m_Wrapper.m_CharcterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharcterActionsCallbackInterfaces.Add(instance);
            @MoveAndUpDown.started += instance.OnMoveAndUpDown;
            @MoveAndUpDown.performed += instance.OnMoveAndUpDown;
            @MoveAndUpDown.canceled += instance.OnMoveAndUpDown;
            @MoveBooster.started += instance.OnMoveBooster;
            @MoveBooster.performed += instance.OnMoveBooster;
            @MoveBooster.canceled += instance.OnMoveBooster;
        }

        private void UnregisterCallbacks(ICharcterActions instance)
        {
            @MoveAndUpDown.started -= instance.OnMoveAndUpDown;
            @MoveAndUpDown.performed -= instance.OnMoveAndUpDown;
            @MoveAndUpDown.canceled -= instance.OnMoveAndUpDown;
            @MoveBooster.started -= instance.OnMoveBooster;
            @MoveBooster.performed -= instance.OnMoveBooster;
            @MoveBooster.canceled -= instance.OnMoveBooster;
        }

        public void RemoveCallbacks(ICharcterActions instance)
        {
            if (m_Wrapper.m_CharcterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharcterActions instance)
        {
            foreach (var item in m_Wrapper.m_CharcterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharcterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharcterActions @Charcter => new CharcterActions(this);

    // KeyBorad
    private readonly InputActionMap m_KeyBorad;
    private List<IKeyBoradActions> m_KeyBoradActionsCallbackInterfaces = new List<IKeyBoradActions>();
    private readonly InputAction m_KeyBorad_System;
    private readonly InputAction m_KeyBorad_OptionKey;
    private readonly InputAction m_KeyBorad_InvenKey;
    public struct KeyBoradActions
    {
        private @InputKeyMouse m_Wrapper;
        public KeyBoradActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @System => m_Wrapper.m_KeyBorad_System;
        public InputAction @OptionKey => m_Wrapper.m_KeyBorad_OptionKey;
        public InputAction @InvenKey => m_Wrapper.m_KeyBorad_InvenKey;
        public InputActionMap Get() { return m_Wrapper.m_KeyBorad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoradActions set) { return set.Get(); }
        public void AddCallbacks(IKeyBoradActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyBoradActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyBoradActionsCallbackInterfaces.Add(instance);
            @System.started += instance.OnSystem;
            @System.performed += instance.OnSystem;
            @System.canceled += instance.OnSystem;
            @OptionKey.started += instance.OnOptionKey;
            @OptionKey.performed += instance.OnOptionKey;
            @OptionKey.canceled += instance.OnOptionKey;
            @InvenKey.started += instance.OnInvenKey;
            @InvenKey.performed += instance.OnInvenKey;
            @InvenKey.canceled += instance.OnInvenKey;
        }

        private void UnregisterCallbacks(IKeyBoradActions instance)
        {
            @System.started -= instance.OnSystem;
            @System.performed -= instance.OnSystem;
            @System.canceled -= instance.OnSystem;
            @OptionKey.started -= instance.OnOptionKey;
            @OptionKey.performed -= instance.OnOptionKey;
            @OptionKey.canceled -= instance.OnOptionKey;
            @InvenKey.started -= instance.OnInvenKey;
            @InvenKey.performed -= instance.OnInvenKey;
            @InvenKey.canceled -= instance.OnInvenKey;
        }

        public void RemoveCallbacks(IKeyBoradActions instance)
        {
            if (m_Wrapper.m_KeyBoradActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyBoradActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyBoradActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyBoradActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyBoradActions @KeyBorad => new KeyBoradActions(this);
    private int m_KeyMouseSchemeIndex = -1;
    public InputControlScheme KeyMouseScheme
    {
        get
        {
            if (m_KeyMouseSchemeIndex == -1) m_KeyMouseSchemeIndex = asset.FindControlSchemeIndex("KeyMouse");
            return asset.controlSchemes[m_KeyMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnWindowOpen(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnTestClick(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest1(InputAction.CallbackContext context);
        void OnTest2(InputAction.CallbackContext context);
        void OnTest3(InputAction.CallbackContext context);
        void OnTest4(InputAction.CallbackContext context);
        void OnTest5(InputAction.CallbackContext context);
    }
    public interface ICharcterActions
    {
        void OnMoveAndUpDown(InputAction.CallbackContext context);
        void OnMoveBooster(InputAction.CallbackContext context);
    }
    public interface IKeyBoradActions
    {
        void OnSystem(InputAction.CallbackContext context);
        void OnOptionKey(InputAction.CallbackContext context);
        void OnInvenKey(InputAction.CallbackContext context);
    }
}
