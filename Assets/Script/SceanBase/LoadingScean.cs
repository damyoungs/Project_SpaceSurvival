using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System;

public class LoadingScean : MonoBehaviour
{
    /// <summary>
    /// 다음씬으로 넘어갈 씬이름
    /// 다음씬이 입력안되면 타이틀로넘어간다.
    /// </summary>
    static string nextSceanName = "Title";
    public static string SceanName => nextSceanName;
    /// <summary>
    /// 로딩 진행도 이미지 종류
    /// EnumList 인터페이스에 정의해놓은 값을 참고한다.
    /// </summary>
    static EnumList.ProgressType progressType;

    /// <summary>
    /// 진행도를 처리할 이미지파일
    /// 
    /// 추가작업: EnumList 와 Factory 의 수정이 추가로필요 아래 switch문에 로직추가
    /// </summary>
    [SerializeField]
    Image progressBar;


    /// <summary>
    /// 페이크 로딩 시간설정 
    /// 로딩의 최소시간이라보면된다.
    /// </summary>
    [Range(1.0f,5.0f)]
    public float fakeTimer = 3.0f;

    

    /// <summary>
    /// 씬이 로딩되기전에 넘어가지않게 로딩화면으로 일단넘어가서 
    /// 다음씬을 비동기로 로딩진행하고 그진행도를 보여주기위해 작성된함수
    /// </summary>
    /// <param name="sceanName">이동할 씬 이름</param>
    /// <param name="type">진행 상황 표기할 타입 기본값 =  막대기형태</param>
    public static void LoadScean(EnumList.SceanName sceanName , EnumList.ProgressType type = EnumList.ProgressType.Bar) { 
        nextSceanName = sceanName.ToString(); //enum맴버변수명을 씬이름으로맞춰야한다.
        progressType = type;
        SceneManager.LoadSceneAsync("Loading");
    }

    /// <summary>
    /// 로딩화면 로딩시 바로 코루틴 실행하여 다음씬에대해 비동기로 로딩을 하고
    /// 그에대한 정보를 받아온다.
    /// </summary>
    void Start()
    {
        StopAllCoroutines();//로딩이 연속으로 이러나는경우에 기존코루틴을 멈추고 새로시작한다.
        StartCoroutine(LoadSceanProcess());  
    }

    /// <summary>
    /// 로딩화면에서 다음씬이 로딩이 완료됬는지 확인하기위해 처리하는작업
    /// </summary>
    /// <returns></returns>
    IEnumerator LoadSceanProcess() {

       
        //비동기 씬로딩정보를 받기위해 가져오는 변수
        AsyncOperation op = SceneManager.LoadSceneAsync(nextSceanName);
        
        //op.allowSceneActivation 값이 true 이면 씬 로딩이 90%(0.9f)이상이 되면 자동으로 다음씬으로 넘어가진다
        op.allowSceneActivation = false;
        //맵이 작은경우 로딩시간이 짧아서 로딩 화면을 순식간에 지나갈수있어서 일단 false 로 
        //로딩씬에서 다음씬으로 이동을 멈춰두고 페이크로딩을 밑에 제작한다.
        
       

        float timer = 0.0f; //로딩 진행도를 담을 변수 (함수를 사용했기때문에 값을 처리하기위해 사용했다.)
        float loadingTime = 0.0f; //프로그래스바 진행시간체크
        while (!op.isDone)  //isDone 으로 다음씬 로딩이 끝낫는지 체크할수있다.
        {
            
            yield return null; //진행바가 바뀔수있게 제어권을 넘긴다.
            loadingTime  += Time.deltaTime; //로딩시간 체크

            // 진행도 표시를 바꾸려면 밑에 로직을 추가
            switch (progressType)
            {
                case EnumList.ProgressType.Bar:
                    if (op.progress < 0.9f) 
                    {
                        //정상 로딩 로직 
                        progressBar.fillAmount = op.progress; //화면 이미지에 진행상황값 전달
                    }
                    else
                    {
                        //페이크로딩 로직

                        timer += Time.unscaledDeltaTime; //Lerp 함수의 진행 상황저장
                        progressBar.fillAmount = Mathf.Lerp(0.9f, 1f, timer); // 0.9 ~ 1.0 사이의 데이터 표시

                        //로딩창이 너무빠르게 넘어가는것을 방지하기위해 페이크 타임 체크
                        if (fakeTimer <  loadingTime) //에디터에서 페이크로딩시간을 조절한다.
                        { 
                            Debug.Log(loadingTime);    //총 걸린시간 체크
                            op.allowSceneActivation = true; //해당 변수가 true면 progress 값이 0.9(90%)값이 넘어가는순간 다음씬을 로딩한다.
                            yield break; //코루틴 나가기
                        }
                    }
                    break;
                default: //타입값을 잘못입력했을경우 이곳으로 이동
                    Debug.LogWarning($"{this.name} 의 프로그래스(progress)바 타입설정을 잘못했습니다. ");
                    yield break;
            }
        }
    }



    
}
