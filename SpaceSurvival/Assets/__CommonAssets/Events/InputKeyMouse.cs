//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/__CommonAssets/Events/InputKeyMouse.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputKeyMouse: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputKeyMouse()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputKeyMouse"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6bf7fcac-46d0-4320-9692-0a76b11f1f1a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cea3fd64-0375-4036-a9c7-f16c71e8a4da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""03061f1f-f80d-44a5-a7a0-b6cdd9686339"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ItemPickUp"",
                    ""type"": ""Button"",
                    ""id"": ""b05c263e-df4c-4eea-9892-fcd3efd12ec1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equip_Item"",
                    ""type"": ""Button"",
                    ""id"": ""76aa3019-e59a-448e-9b43-ed44f0e446d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveMode_Change"",
                    ""type"": ""Button"",
                    ""id"": ""58cce24f-25c0-4dd8-9748-c832251e369b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""ff788026-fc2b-4f17-a500-ff74e98701d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d1542847-2a7b-46b0-b170-656cd38e9d98"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c4f5ccea-9b87-4783-8aa4-03b2fa6b9216"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b450dbef-4b2d-479b-8ba8-522b177c5f1d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""697f3cc2-99fe-4bd7-a17a-834b7f13e76c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""304553b5-d31b-450b-bf69-8faa5e0054bb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7bc88173-7735-4b85-8d40-9c3440e4a0b8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f631461-747c-4088-bdef-3dadcfc7bdbc"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemPickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66d88ca4-cb5b-4eda-9b55-f8de612e258b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapDelay=0.4)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Equip_Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53feca87-2df9-4191-926e-2cb081f00873"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""MultiTap(tapDelay=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMode_Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d116796-5c07-4e0e-b0bc-b1b1c1727638"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""459b7981-17d4-4cdb-b460-aa8727c82cbd"",
            ""actions"": [
                {
                    ""name"": ""Test1"",
                    ""type"": ""Button"",
                    ""id"": ""e2a7b691-1e40-4aa5-99da-4c03dd54e93f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test2"",
                    ""type"": ""Button"",
                    ""id"": ""9df0db3a-63ec-43f9-9e68-0d988353c2a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test3"",
                    ""type"": ""Button"",
                    ""id"": ""1e0289bf-241d-41cd-9176-fd0a2f06acf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test4"",
                    ""type"": ""Button"",
                    ""id"": ""03ed11f3-8bec-4c40-bbd9-f095f2c54d40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test5"",
                    ""type"": ""Button"",
                    ""id"": ""96d59e6f-7918-4196-8a36-f3c11bfc2d11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test6"",
                    ""type"": ""Button"",
                    ""id"": ""72839171-20a6-4bb8-a59a-0e58244a4187"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test7"",
                    ""type"": ""Button"",
                    ""id"": ""9c4d1267-1960-496c-b056-b975c544a935"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test8"",
                    ""type"": ""Button"",
                    ""id"": ""f4d8ae40-5195-4ff5-a6c3-69cd987a99ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test9"",
                    ""type"": ""Button"",
                    ""id"": ""263fde5e-d1fe-4d23-bc9a-e59bba47493e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestClick"",
                    ""type"": ""Button"",
                    ""id"": ""ce03a7e5-86f4-43b8-a1c4-421ea1dd879d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30fb653a-f297-4f69-a18e-088cd0dd1fd6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d09cc2ec-e495-48d3-ad2b-99dfcee6de60"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baa0215c-4520-441d-954b-b8324373b3d0"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93c3af3e-f400-4e6d-82cf-47ba02a96cc2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05e51d6a-a305-4b2c-9851-5d7f7195826f"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""303d6395-ae48-4394-9f03-341cf79014ea"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dff415cc-a451-42b7-8c45-90f2bbeabbbb"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29234d7e-6cfc-4cfa-b66a-6a66ff54c2cc"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cb9c2dc-c42a-43c4-a092-936837ebf247"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33a1dde6-822d-4836-938e-d9420a5393dc"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Inven"",
            ""id"": ""60105a31-2baa-4a4a-a6e1-de88fe1fcdb9"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""8abfd317-8e81-489c-a229-9ae255004d07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""4a88eb60-c7c6-4cfc-82fa-2104f1652ed3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EquipBox_Open"",
                    ""type"": ""Button"",
                    ""id"": ""d7f462e0-ab16-4bd9-915f-9b5721d3e0ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inven_Open"",
                    ""type"": ""Button"",
                    ""id"": ""d2f2fa64-8b30-4c27-9625-7b6dba702a5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClickRight"",
                    ""type"": ""Button"",
                    ""id"": ""546766a6-2cbe-4aac-a24a-e6102c8fd188"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c1eaa1a-1035-461f-98d1-5b848099ce11"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c541439f-abcb-4970-88e8-0f6b3865bb85"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ab09f04-a71e-4908-8770-5327b835f909"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EquipBox_Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69b2f2af-679d-4e09-b998-7bd26312be45"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Inven_Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6ecdcac-545b-4cd4-be88-f873f49ede3b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""MouseClickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""0c04e0dc-59e0-4a25-a0d2-0f78bde0d4c5"",
            ""actions"": [
                {
                    ""name"": ""RightRotate"",
                    ""type"": ""Button"",
                    ""id"": ""b1ff20a7-071a-4977-a13b-a30e670b5dbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRotate"",
                    ""type"": ""Button"",
                    ""id"": ""6a51fb97-32f0-461b-a5ca-abb04484fe91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10b9e187-3357-4e90-b1cb-0cd0ddf71203"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""LeftRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4938f774-f587-4710-831f-357baa60df75"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""RightRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""QuickSlot"",
            ""id"": ""af86c375-5631-440a-ae6f-2fa48dd89f0c"",
            ""actions"": [
                {
                    ""name"": ""PopUp"",
                    ""type"": ""Button"",
                    ""id"": ""ca942b57-ce6b-4099-a6c7-02dd1de64112"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""2bae0ceb-f105-4fae-a2d6-33025c50a88e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Eight"",
                    ""type"": ""Button"",
                    ""id"": ""f549c487-e6b5-4a0c-b4c9-87fc1ee00c74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Nine"",
                    ""type"": ""Button"",
                    ""id"": ""e54c0b4d-2ed5-4320-bcea-1cf03702dd49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zero"",
                    ""type"": ""Button"",
                    ""id"": ""7de91f94-f342-4ea8-8837-705bc5f7d016"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ctrl"",
                    ""type"": ""Button"",
                    ""id"": ""0b2ed126-ade9-4f8a-a921-251dc31ffec3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt"",
                    ""type"": ""Button"",
                    ""id"": ""4d4e8752-2091-45be-bfac-f4382f822afb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""113c520c-b01a-4b52-81dd-038dd521282b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Insert"",
                    ""type"": ""Button"",
                    ""id"": ""4719edb9-8c45-4a57-99a6-684b99c92dfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""91cae512-e3db-487f-b77c-aa20fc0441d0"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PopUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de65eb02-40ad-429b-aeb0-fc844f764e44"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3801daac-16e8-42c3-944c-ab39a8f23aa2"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c641ddf-1ddd-47ca-ba65-0e7af841e657"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85866115-b48b-4d9d-843c-8d3353b9228e"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zero"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdb13cef-ff81-413c-9110-e7f93ae194eb"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ctrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b23e353b-4202-4aeb-8745-3578e4afc967"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fec19cc-9eb1-4f2b-bc23-d86f840fbacc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e32adbc-9835-47d1-9678-396d867eb022"",
                    ""path"": ""<Keyboard>/insert"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Insert"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BattleMap_Player"",
            ""id"": ""6be181be-5035-4140-8f9c-a881b83f29cc"",
            ""actions"": [
                {
                    ""name"": ""UnitMove"",
                    ""type"": ""Value"",
                    ""id"": ""a9df35c9-17f8-4152-bd6a-fbebd6441e39"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f23fd2f-204a-40c3-b65a-0f1658ae484f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""UnitMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input_Action_NoneGame"",
            ""id"": ""933bd442-d2fd-43b4-ae2c-debcac8162ab"",
            ""actions"": [
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""e51245cf-4b6f-4561-8caf-03e3bbef91f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""5e531d8e-0bff-4f12-9f4e-411a0480232b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3eaa59f4-3d37-419b-b43e-8d5c499aa90a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6795fb06-e89c-4954-b76d-99a1bbc6fab9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Options"",
            ""id"": ""ceb84fae-6a73-4113-af77-ee192c5d53bc"",
            ""actions"": [
                {
                    ""name"": ""WindowOpen"",
                    ""type"": ""Button"",
                    ""id"": ""b2da411f-8b22-47ca-8b1e-f216cefd1156"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""f0cdd2ba-7de3-4bb0-b1f9-c6e0297b05d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44507232-fb9c-4284-92ca-f7c3bc919c56"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""WindowOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ac2df63-49a9-4d73-90a8-444542a55ea1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_ModalPopup"",
            ""id"": ""dbfbc67c-2ef3-48ca-beee-41a33cefa371"",
            ""actions"": [
                {
                    ""name"": ""OnOff"",
                    ""type"": ""Button"",
                    ""id"": ""72cab398-721c-4afb-b319-94ee8af7d97a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""085149f5-3488-42ef-a930-b7be527c781a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyMouse"",
            ""bindingGroup"": ""KeyMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_ItemPickUp = m_Player.FindAction("ItemPickUp", throwIfNotFound: true);
        m_Player_Equip_Item = m_Player.FindAction("Equip_Item", throwIfNotFound: true);
        m_Player_MoveMode_Change = m_Player.FindAction("MoveMode_Change", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test1 = m_Test.FindAction("Test1", throwIfNotFound: true);
        m_Test_Test2 = m_Test.FindAction("Test2", throwIfNotFound: true);
        m_Test_Test3 = m_Test.FindAction("Test3", throwIfNotFound: true);
        m_Test_Test4 = m_Test.FindAction("Test4", throwIfNotFound: true);
        m_Test_Test5 = m_Test.FindAction("Test5", throwIfNotFound: true);
        m_Test_Test6 = m_Test.FindAction("Test6", throwIfNotFound: true);
        m_Test_Test7 = m_Test.FindAction("Test7", throwIfNotFound: true);
        m_Test_Test8 = m_Test.FindAction("Test8", throwIfNotFound: true);
        m_Test_Test9 = m_Test.FindAction("Test9", throwIfNotFound: true);
        m_Test_TestClick = m_Test.FindAction("TestClick", throwIfNotFound: true);
        // UI_Inven
        m_UI_Inven = asset.FindActionMap("UI_Inven", throwIfNotFound: true);
        m_UI_Inven_Click = m_UI_Inven.FindAction("Click", throwIfNotFound: true);
        m_UI_Inven_Shift = m_UI_Inven.FindAction("Shift", throwIfNotFound: true);
        m_UI_Inven_EquipBox_Open = m_UI_Inven.FindAction("EquipBox_Open", throwIfNotFound: true);
        m_UI_Inven_Inven_Open = m_UI_Inven.FindAction("Inven_Open", throwIfNotFound: true);
        m_UI_Inven_MouseClickRight = m_UI_Inven.FindAction("MouseClickRight", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_RightRotate = m_Camera.FindAction("RightRotate", throwIfNotFound: true);
        m_Camera_LeftRotate = m_Camera.FindAction("LeftRotate", throwIfNotFound: true);
        // QuickSlot
        m_QuickSlot = asset.FindActionMap("QuickSlot", throwIfNotFound: true);
        m_QuickSlot_PopUp = m_QuickSlot.FindAction("PopUp", throwIfNotFound: true);
        m_QuickSlot_Shift = m_QuickSlot.FindAction("Shift", throwIfNotFound: true);
        m_QuickSlot_Eight = m_QuickSlot.FindAction("Eight", throwIfNotFound: true);
        m_QuickSlot_Nine = m_QuickSlot.FindAction("Nine", throwIfNotFound: true);
        m_QuickSlot_Zero = m_QuickSlot.FindAction("Zero", throwIfNotFound: true);
        m_QuickSlot_Ctrl = m_QuickSlot.FindAction("Ctrl", throwIfNotFound: true);
        m_QuickSlot_Alt = m_QuickSlot.FindAction("Alt", throwIfNotFound: true);
        m_QuickSlot_Space = m_QuickSlot.FindAction("Space", throwIfNotFound: true);
        m_QuickSlot_Insert = m_QuickSlot.FindAction("Insert", throwIfNotFound: true);
        // BattleMap_Player
        m_BattleMap_Player = asset.FindActionMap("BattleMap_Player", throwIfNotFound: true);
        m_BattleMap_Player_UnitMove = m_BattleMap_Player.FindAction("UnitMove", throwIfNotFound: true);
        // Input_Action_NoneGame
        m_Input_Action_NoneGame = asset.FindActionMap("Input_Action_NoneGame", throwIfNotFound: true);
        m_Input_Action_NoneGame_Esc = m_Input_Action_NoneGame.FindAction("Esc", throwIfNotFound: true);
        m_Input_Action_NoneGame_MouseClick = m_Input_Action_NoneGame.FindAction("MouseClick", throwIfNotFound: true);
        // UI_Options
        m_UI_Options = asset.FindActionMap("UI_Options", throwIfNotFound: true);
        m_UI_Options_WindowOpen = m_UI_Options.FindAction("WindowOpen", throwIfNotFound: true);
        m_UI_Options_Esc = m_UI_Options.FindAction("Esc", throwIfNotFound: true);
        // UI_ModalPopup
        m_UI_ModalPopup = asset.FindActionMap("UI_ModalPopup", throwIfNotFound: true);
        m_UI_ModalPopup_OnOff = m_UI_ModalPopup.FindAction("OnOff", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_ItemPickUp;
    private readonly InputAction m_Player_Equip_Item;
    private readonly InputAction m_Player_MoveMode_Change;
    private readonly InputAction m_Player_Run;
    public struct PlayerActions
    {
        private @InputKeyMouse m_Wrapper;
        public PlayerActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @ItemPickUp => m_Wrapper.m_Player_ItemPickUp;
        public InputAction @Equip_Item => m_Wrapper.m_Player_Equip_Item;
        public InputAction @MoveMode_Change => m_Wrapper.m_Player_MoveMode_Change;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @ItemPickUp.started += instance.OnItemPickUp;
            @ItemPickUp.performed += instance.OnItemPickUp;
            @ItemPickUp.canceled += instance.OnItemPickUp;
            @Equip_Item.started += instance.OnEquip_Item;
            @Equip_Item.performed += instance.OnEquip_Item;
            @Equip_Item.canceled += instance.OnEquip_Item;
            @MoveMode_Change.started += instance.OnMoveMode_Change;
            @MoveMode_Change.performed += instance.OnMoveMode_Change;
            @MoveMode_Change.canceled += instance.OnMoveMode_Change;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @ItemPickUp.started -= instance.OnItemPickUp;
            @ItemPickUp.performed -= instance.OnItemPickUp;
            @ItemPickUp.canceled -= instance.OnItemPickUp;
            @Equip_Item.started -= instance.OnEquip_Item;
            @Equip_Item.performed -= instance.OnEquip_Item;
            @Equip_Item.canceled -= instance.OnEquip_Item;
            @MoveMode_Change.started -= instance.OnMoveMode_Change;
            @MoveMode_Change.performed -= instance.OnMoveMode_Change;
            @MoveMode_Change.canceled -= instance.OnMoveMode_Change;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Test1;
    private readonly InputAction m_Test_Test2;
    private readonly InputAction m_Test_Test3;
    private readonly InputAction m_Test_Test4;
    private readonly InputAction m_Test_Test5;
    private readonly InputAction m_Test_Test6;
    private readonly InputAction m_Test_Test7;
    private readonly InputAction m_Test_Test8;
    private readonly InputAction m_Test_Test9;
    private readonly InputAction m_Test_TestClick;
    public struct TestActions
    {
        private @InputKeyMouse m_Wrapper;
        public TestActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test1 => m_Wrapper.m_Test_Test1;
        public InputAction @Test2 => m_Wrapper.m_Test_Test2;
        public InputAction @Test3 => m_Wrapper.m_Test_Test3;
        public InputAction @Test4 => m_Wrapper.m_Test_Test4;
        public InputAction @Test5 => m_Wrapper.m_Test_Test5;
        public InputAction @Test6 => m_Wrapper.m_Test_Test6;
        public InputAction @Test7 => m_Wrapper.m_Test_Test7;
        public InputAction @Test8 => m_Wrapper.m_Test_Test8;
        public InputAction @Test9 => m_Wrapper.m_Test_Test9;
        public InputAction @TestClick => m_Wrapper.m_Test_TestClick;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Test1.started += instance.OnTest1;
            @Test1.performed += instance.OnTest1;
            @Test1.canceled += instance.OnTest1;
            @Test2.started += instance.OnTest2;
            @Test2.performed += instance.OnTest2;
            @Test2.canceled += instance.OnTest2;
            @Test3.started += instance.OnTest3;
            @Test3.performed += instance.OnTest3;
            @Test3.canceled += instance.OnTest3;
            @Test4.started += instance.OnTest4;
            @Test4.performed += instance.OnTest4;
            @Test4.canceled += instance.OnTest4;
            @Test5.started += instance.OnTest5;
            @Test5.performed += instance.OnTest5;
            @Test5.canceled += instance.OnTest5;
            @Test6.started += instance.OnTest6;
            @Test6.performed += instance.OnTest6;
            @Test6.canceled += instance.OnTest6;
            @Test7.started += instance.OnTest7;
            @Test7.performed += instance.OnTest7;
            @Test7.canceled += instance.OnTest7;
            @Test8.started += instance.OnTest8;
            @Test8.performed += instance.OnTest8;
            @Test8.canceled += instance.OnTest8;
            @Test9.started += instance.OnTest9;
            @Test9.performed += instance.OnTest9;
            @Test9.canceled += instance.OnTest9;
            @TestClick.started += instance.OnTestClick;
            @TestClick.performed += instance.OnTestClick;
            @TestClick.canceled += instance.OnTestClick;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Test1.started -= instance.OnTest1;
            @Test1.performed -= instance.OnTest1;
            @Test1.canceled -= instance.OnTest1;
            @Test2.started -= instance.OnTest2;
            @Test2.performed -= instance.OnTest2;
            @Test2.canceled -= instance.OnTest2;
            @Test3.started -= instance.OnTest3;
            @Test3.performed -= instance.OnTest3;
            @Test3.canceled -= instance.OnTest3;
            @Test4.started -= instance.OnTest4;
            @Test4.performed -= instance.OnTest4;
            @Test4.canceled -= instance.OnTest4;
            @Test5.started -= instance.OnTest5;
            @Test5.performed -= instance.OnTest5;
            @Test5.canceled -= instance.OnTest5;
            @Test6.started -= instance.OnTest6;
            @Test6.performed -= instance.OnTest6;
            @Test6.canceled -= instance.OnTest6;
            @Test7.started -= instance.OnTest7;
            @Test7.performed -= instance.OnTest7;
            @Test7.canceled -= instance.OnTest7;
            @Test8.started -= instance.OnTest8;
            @Test8.performed -= instance.OnTest8;
            @Test8.canceled -= instance.OnTest8;
            @Test9.started -= instance.OnTest9;
            @Test9.performed -= instance.OnTest9;
            @Test9.canceled -= instance.OnTest9;
            @TestClick.started -= instance.OnTestClick;
            @TestClick.performed -= instance.OnTestClick;
            @TestClick.canceled -= instance.OnTestClick;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);

    // UI_Inven
    private readonly InputActionMap m_UI_Inven;
    private List<IUI_InvenActions> m_UI_InvenActionsCallbackInterfaces = new List<IUI_InvenActions>();
    private readonly InputAction m_UI_Inven_Click;
    private readonly InputAction m_UI_Inven_Shift;
    private readonly InputAction m_UI_Inven_EquipBox_Open;
    private readonly InputAction m_UI_Inven_Inven_Open;
    private readonly InputAction m_UI_Inven_MouseClickRight;
    public struct UI_InvenActions
    {
        private @InputKeyMouse m_Wrapper;
        public UI_InvenActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Inven_Click;
        public InputAction @Shift => m_Wrapper.m_UI_Inven_Shift;
        public InputAction @EquipBox_Open => m_Wrapper.m_UI_Inven_EquipBox_Open;
        public InputAction @Inven_Open => m_Wrapper.m_UI_Inven_Inven_Open;
        public InputAction @MouseClickRight => m_Wrapper.m_UI_Inven_MouseClickRight;
        public InputActionMap Get() { return m_Wrapper.m_UI_Inven; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_InvenActions set) { return set.Get(); }
        public void AddCallbacks(IUI_InvenActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @EquipBox_Open.started += instance.OnEquipBox_Open;
            @EquipBox_Open.performed += instance.OnEquipBox_Open;
            @EquipBox_Open.canceled += instance.OnEquipBox_Open;
            @Inven_Open.started += instance.OnInven_Open;
            @Inven_Open.performed += instance.OnInven_Open;
            @Inven_Open.canceled += instance.OnInven_Open;
            @MouseClickRight.started += instance.OnMouseClickRight;
            @MouseClickRight.performed += instance.OnMouseClickRight;
            @MouseClickRight.canceled += instance.OnMouseClickRight;
        }

        private void UnregisterCallbacks(IUI_InvenActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @EquipBox_Open.started -= instance.OnEquipBox_Open;
            @EquipBox_Open.performed -= instance.OnEquipBox_Open;
            @EquipBox_Open.canceled -= instance.OnEquipBox_Open;
            @Inven_Open.started -= instance.OnInven_Open;
            @Inven_Open.performed -= instance.OnInven_Open;
            @Inven_Open.canceled -= instance.OnInven_Open;
            @MouseClickRight.started -= instance.OnMouseClickRight;
            @MouseClickRight.performed -= instance.OnMouseClickRight;
            @MouseClickRight.canceled -= instance.OnMouseClickRight;
        }

        public void RemoveCallbacks(IUI_InvenActions instance)
        {
            if (m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_InvenActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_InvenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_InvenActions @UI_Inven => new UI_InvenActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_RightRotate;
    private readonly InputAction m_Camera_LeftRotate;
    public struct CameraActions
    {
        private @InputKeyMouse m_Wrapper;
        public CameraActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightRotate => m_Wrapper.m_Camera_RightRotate;
        public InputAction @LeftRotate => m_Wrapper.m_Camera_LeftRotate;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @RightRotate.started += instance.OnRightRotate;
            @RightRotate.performed += instance.OnRightRotate;
            @RightRotate.canceled += instance.OnRightRotate;
            @LeftRotate.started += instance.OnLeftRotate;
            @LeftRotate.performed += instance.OnLeftRotate;
            @LeftRotate.canceled += instance.OnLeftRotate;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @RightRotate.started -= instance.OnRightRotate;
            @RightRotate.performed -= instance.OnRightRotate;
            @RightRotate.canceled -= instance.OnRightRotate;
            @LeftRotate.started -= instance.OnLeftRotate;
            @LeftRotate.performed -= instance.OnLeftRotate;
            @LeftRotate.canceled -= instance.OnLeftRotate;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // QuickSlot
    private readonly InputActionMap m_QuickSlot;
    private List<IQuickSlotActions> m_QuickSlotActionsCallbackInterfaces = new List<IQuickSlotActions>();
    private readonly InputAction m_QuickSlot_PopUp;
    private readonly InputAction m_QuickSlot_Shift;
    private readonly InputAction m_QuickSlot_Eight;
    private readonly InputAction m_QuickSlot_Nine;
    private readonly InputAction m_QuickSlot_Zero;
    private readonly InputAction m_QuickSlot_Ctrl;
    private readonly InputAction m_QuickSlot_Alt;
    private readonly InputAction m_QuickSlot_Space;
    private readonly InputAction m_QuickSlot_Insert;
    public struct QuickSlotActions
    {
        private @InputKeyMouse m_Wrapper;
        public QuickSlotActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @PopUp => m_Wrapper.m_QuickSlot_PopUp;
        public InputAction @Shift => m_Wrapper.m_QuickSlot_Shift;
        public InputAction @Eight => m_Wrapper.m_QuickSlot_Eight;
        public InputAction @Nine => m_Wrapper.m_QuickSlot_Nine;
        public InputAction @Zero => m_Wrapper.m_QuickSlot_Zero;
        public InputAction @Ctrl => m_Wrapper.m_QuickSlot_Ctrl;
        public InputAction @Alt => m_Wrapper.m_QuickSlot_Alt;
        public InputAction @Space => m_Wrapper.m_QuickSlot_Space;
        public InputAction @Insert => m_Wrapper.m_QuickSlot_Insert;
        public InputActionMap Get() { return m_Wrapper.m_QuickSlot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuickSlotActions set) { return set.Get(); }
        public void AddCallbacks(IQuickSlotActions instance)
        {
            if (instance == null || m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Add(instance);
            @PopUp.started += instance.OnPopUp;
            @PopUp.performed += instance.OnPopUp;
            @PopUp.canceled += instance.OnPopUp;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @Eight.started += instance.OnEight;
            @Eight.performed += instance.OnEight;
            @Eight.canceled += instance.OnEight;
            @Nine.started += instance.OnNine;
            @Nine.performed += instance.OnNine;
            @Nine.canceled += instance.OnNine;
            @Zero.started += instance.OnZero;
            @Zero.performed += instance.OnZero;
            @Zero.canceled += instance.OnZero;
            @Ctrl.started += instance.OnCtrl;
            @Ctrl.performed += instance.OnCtrl;
            @Ctrl.canceled += instance.OnCtrl;
            @Alt.started += instance.OnAlt;
            @Alt.performed += instance.OnAlt;
            @Alt.canceled += instance.OnAlt;
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
            @Insert.started += instance.OnInsert;
            @Insert.performed += instance.OnInsert;
            @Insert.canceled += instance.OnInsert;
        }

        private void UnregisterCallbacks(IQuickSlotActions instance)
        {
            @PopUp.started -= instance.OnPopUp;
            @PopUp.performed -= instance.OnPopUp;
            @PopUp.canceled -= instance.OnPopUp;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @Eight.started -= instance.OnEight;
            @Eight.performed -= instance.OnEight;
            @Eight.canceled -= instance.OnEight;
            @Nine.started -= instance.OnNine;
            @Nine.performed -= instance.OnNine;
            @Nine.canceled -= instance.OnNine;
            @Zero.started -= instance.OnZero;
            @Zero.performed -= instance.OnZero;
            @Zero.canceled -= instance.OnZero;
            @Ctrl.started -= instance.OnCtrl;
            @Ctrl.performed -= instance.OnCtrl;
            @Ctrl.canceled -= instance.OnCtrl;
            @Alt.started -= instance.OnAlt;
            @Alt.performed -= instance.OnAlt;
            @Alt.canceled -= instance.OnAlt;
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
            @Insert.started -= instance.OnInsert;
            @Insert.performed -= instance.OnInsert;
            @Insert.canceled -= instance.OnInsert;
        }

        public void RemoveCallbacks(IQuickSlotActions instance)
        {
            if (m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuickSlotActions instance)
        {
            foreach (var item in m_Wrapper.m_QuickSlotActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QuickSlotActions @QuickSlot => new QuickSlotActions(this);

    // BattleMap_Player
    private readonly InputActionMap m_BattleMap_Player;
    private List<IBattleMap_PlayerActions> m_BattleMap_PlayerActionsCallbackInterfaces = new List<IBattleMap_PlayerActions>();
    private readonly InputAction m_BattleMap_Player_UnitMove;
    public struct BattleMap_PlayerActions
    {
        private @InputKeyMouse m_Wrapper;
        public BattleMap_PlayerActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnitMove => m_Wrapper.m_BattleMap_Player_UnitMove;
        public InputActionMap Get() { return m_Wrapper.m_BattleMap_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleMap_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IBattleMap_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Add(instance);
            @UnitMove.started += instance.OnUnitMove;
            @UnitMove.performed += instance.OnUnitMove;
            @UnitMove.canceled += instance.OnUnitMove;
        }

        private void UnregisterCallbacks(IBattleMap_PlayerActions instance)
        {
            @UnitMove.started -= instance.OnUnitMove;
            @UnitMove.performed -= instance.OnUnitMove;
            @UnitMove.canceled -= instance.OnUnitMove;
        }

        public void RemoveCallbacks(IBattleMap_PlayerActions instance)
        {
            if (m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleMap_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleMap_PlayerActions @BattleMap_Player => new BattleMap_PlayerActions(this);

    // Input_Action_NoneGame
    private readonly InputActionMap m_Input_Action_NoneGame;
    private List<IInput_Action_NoneGameActions> m_Input_Action_NoneGameActionsCallbackInterfaces = new List<IInput_Action_NoneGameActions>();
    private readonly InputAction m_Input_Action_NoneGame_Esc;
    private readonly InputAction m_Input_Action_NoneGame_MouseClick;
    public struct Input_Action_NoneGameActions
    {
        private @InputKeyMouse m_Wrapper;
        public Input_Action_NoneGameActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Esc => m_Wrapper.m_Input_Action_NoneGame_Esc;
        public InputAction @MouseClick => m_Wrapper.m_Input_Action_NoneGame_MouseClick;
        public InputActionMap Get() { return m_Wrapper.m_Input_Action_NoneGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Input_Action_NoneGameActions set) { return set.Get(); }
        public void AddCallbacks(IInput_Action_NoneGameActions instance)
        {
            if (instance == null || m_Wrapper.m_Input_Action_NoneGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Input_Action_NoneGameActionsCallbackInterfaces.Add(instance);
            @Esc.started += instance.OnEsc;
            @Esc.performed += instance.OnEsc;
            @Esc.canceled += instance.OnEsc;
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
        }

        private void UnregisterCallbacks(IInput_Action_NoneGameActions instance)
        {
            @Esc.started -= instance.OnEsc;
            @Esc.performed -= instance.OnEsc;
            @Esc.canceled -= instance.OnEsc;
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
        }

        public void RemoveCallbacks(IInput_Action_NoneGameActions instance)
        {
            if (m_Wrapper.m_Input_Action_NoneGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInput_Action_NoneGameActions instance)
        {
            foreach (var item in m_Wrapper.m_Input_Action_NoneGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Input_Action_NoneGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Input_Action_NoneGameActions @Input_Action_NoneGame => new Input_Action_NoneGameActions(this);

    // UI_Options
    private readonly InputActionMap m_UI_Options;
    private List<IUI_OptionsActions> m_UI_OptionsActionsCallbackInterfaces = new List<IUI_OptionsActions>();
    private readonly InputAction m_UI_Options_WindowOpen;
    private readonly InputAction m_UI_Options_Esc;
    public struct UI_OptionsActions
    {
        private @InputKeyMouse m_Wrapper;
        public UI_OptionsActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @WindowOpen => m_Wrapper.m_UI_Options_WindowOpen;
        public InputAction @Esc => m_Wrapper.m_UI_Options_Esc;
        public InputActionMap Get() { return m_Wrapper.m_UI_Options; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_OptionsActions set) { return set.Get(); }
        public void AddCallbacks(IUI_OptionsActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_OptionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_OptionsActionsCallbackInterfaces.Add(instance);
            @WindowOpen.started += instance.OnWindowOpen;
            @WindowOpen.performed += instance.OnWindowOpen;
            @WindowOpen.canceled += instance.OnWindowOpen;
            @Esc.started += instance.OnEsc;
            @Esc.performed += instance.OnEsc;
            @Esc.canceled += instance.OnEsc;
        }

        private void UnregisterCallbacks(IUI_OptionsActions instance)
        {
            @WindowOpen.started -= instance.OnWindowOpen;
            @WindowOpen.performed -= instance.OnWindowOpen;
            @WindowOpen.canceled -= instance.OnWindowOpen;
            @Esc.started -= instance.OnEsc;
            @Esc.performed -= instance.OnEsc;
            @Esc.canceled -= instance.OnEsc;
        }

        public void RemoveCallbacks(IUI_OptionsActions instance)
        {
            if (m_Wrapper.m_UI_OptionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_OptionsActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_OptionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_OptionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_OptionsActions @UI_Options => new UI_OptionsActions(this);

    // UI_ModalPopup
    private readonly InputActionMap m_UI_ModalPopup;
    private List<IUI_ModalPopupActions> m_UI_ModalPopupActionsCallbackInterfaces = new List<IUI_ModalPopupActions>();
    private readonly InputAction m_UI_ModalPopup_OnOff;
    public struct UI_ModalPopupActions
    {
        private @InputKeyMouse m_Wrapper;
        public UI_ModalPopupActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnOff => m_Wrapper.m_UI_ModalPopup_OnOff;
        public InputActionMap Get() { return m_Wrapper.m_UI_ModalPopup; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_ModalPopupActions set) { return set.Get(); }
        public void AddCallbacks(IUI_ModalPopupActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_ModalPopupActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_ModalPopupActionsCallbackInterfaces.Add(instance);
            @OnOff.started += instance.OnOnOff;
            @OnOff.performed += instance.OnOnOff;
            @OnOff.canceled += instance.OnOnOff;
        }

        private void UnregisterCallbacks(IUI_ModalPopupActions instance)
        {
            @OnOff.started -= instance.OnOnOff;
            @OnOff.performed -= instance.OnOnOff;
            @OnOff.canceled -= instance.OnOnOff;
        }

        public void RemoveCallbacks(IUI_ModalPopupActions instance)
        {
            if (m_Wrapper.m_UI_ModalPopupActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_ModalPopupActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_ModalPopupActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_ModalPopupActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_ModalPopupActions @UI_ModalPopup => new UI_ModalPopupActions(this);
    private int m_KeyMouseSchemeIndex = -1;
    public InputControlScheme KeyMouseScheme
    {
        get
        {
            if (m_KeyMouseSchemeIndex == -1) m_KeyMouseSchemeIndex = asset.FindControlSchemeIndex("KeyMouse");
            return asset.controlSchemes[m_KeyMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnItemPickUp(InputAction.CallbackContext context);
        void OnEquip_Item(InputAction.CallbackContext context);
        void OnMoveMode_Change(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest1(InputAction.CallbackContext context);
        void OnTest2(InputAction.CallbackContext context);
        void OnTest3(InputAction.CallbackContext context);
        void OnTest4(InputAction.CallbackContext context);
        void OnTest5(InputAction.CallbackContext context);
        void OnTest6(InputAction.CallbackContext context);
        void OnTest7(InputAction.CallbackContext context);
        void OnTest8(InputAction.CallbackContext context);
        void OnTest9(InputAction.CallbackContext context);
        void OnTestClick(InputAction.CallbackContext context);
    }
    public interface IUI_InvenActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnEquipBox_Open(InputAction.CallbackContext context);
        void OnInven_Open(InputAction.CallbackContext context);
        void OnMouseClickRight(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnRightRotate(InputAction.CallbackContext context);
        void OnLeftRotate(InputAction.CallbackContext context);
    }
    public interface IQuickSlotActions
    {
        void OnPopUp(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnEight(InputAction.CallbackContext context);
        void OnNine(InputAction.CallbackContext context);
        void OnZero(InputAction.CallbackContext context);
        void OnCtrl(InputAction.CallbackContext context);
        void OnAlt(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnInsert(InputAction.CallbackContext context);
    }
    public interface IBattleMap_PlayerActions
    {
        void OnUnitMove(InputAction.CallbackContext context);
    }
    public interface IInput_Action_NoneGameActions
    {
        void OnEsc(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
    }
    public interface IUI_OptionsActions
    {
        void OnWindowOpen(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
    }
    public interface IUI_ModalPopupActions
    {
        void OnOnOff(InputAction.CallbackContext context);
    }
}
